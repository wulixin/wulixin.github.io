<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

<meta charset="utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="pandoc" />




<title>Setting Output args via Render functions</title>

<script src="site_libs/jquery-1.11.3/jquery.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<link href="site_libs/bootstrap-3.3.5/css/cosmo.min.css" rel="stylesheet" />
<script src="site_libs/bootstrap-3.3.5/js/bootstrap.min.js"></script>
<script src="site_libs/bootstrap-3.3.5/shim/html5shiv.min.js"></script>
<script src="site_libs/bootstrap-3.3.5/shim/respond.min.js"></script>
<script src="site_libs/jqueryui-1.11.4/jquery-ui.min.js"></script>
<link href="site_libs/tocify-1.9.1/jquery.tocify.css" rel="stylesheet" />
<script src="site_libs/tocify-1.9.1/jquery.tocify.js"></script>
<script src="site_libs/navigation-1.1/tabsets.js"></script>

<meta name="description" content="Turn your analyses into high quality documents, reports, presentations and dashboards with R Markdown. Use a productive notebook interface to weave together narrative text and code to produce elegantly formatted output. Use multiple languages including R, Python, and SQL. R Markdown supports a reproducible workflow for dozens of static and dynamic output formats including HTML, PDF, MS Word, Beamer, HTML5 slides, Tufte-style handouts, books, dashboards, shiny applications, scientific articles, websites, and more." />

<link rel="icon" type="image/png" href="images/favicon.png" />

<script type="text/javascript" src="js/redirect.js"></script>
<script type="text/javascript" src="js/rmarkdown.js"></script>
<script type="text/javascript" src="js/ga.js"></script>




<style type="text/css">
h1 {
  font-size: 34px;
}
h1.title {
  font-size: 38px;
}
h2 {
  font-size: 30px;
}
h3 {
  font-size: 24px;
}
h4 {
  font-size: 18px;
}
h5 {
  font-size: 16px;
}
h6 {
  font-size: 12px;
}
.table th:not([align]) {
  text-align: left;
}
</style>

<link rel="stylesheet" href="css/rmarkdown.css" type="text/css" />



<style type = "text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
code {
  color: inherit;
  background-color: rgba(0, 0, 0, 0.04);
}
img {
  max-width:100%;
  height: auto;
}
.tabbed-pane {
  padding-top: 12px;
}
.html-widget {
  margin-bottom: 20px;
}
button.code-folding-btn:focus {
  outline: none;
}
summary {
  display: list-item;
}
</style>



<!-- tabsets -->

<style type="text/css">
.tabset-dropdown > .nav-tabs {
  display: inline-table;
  max-height: 500px;
  min-height: 44px;
  overflow-y: auto;
  background: white;
  border: 1px solid #ddd;
  border-radius: 4px;
}
.tabset-dropdown > .nav-tabs > li.active:before {
  content: "";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}
.tabset-dropdown > .nav-tabs.nav-tabs-open > li.active:before {
  content: "&#xe258;";
  border: none;
}
.tabset-dropdown > .nav-tabs.nav-tabs-open:before {
  content: "";
  font-family: 'Glyphicons Halflings';
  display: inline-block;
  padding: 10px;
  border-right: 1px solid #ddd;
}
.tabset-dropdown > .nav-tabs > li.active {
  display: block;
}
.tabset-dropdown > .nav-tabs > li > a,
.tabset-dropdown > .nav-tabs > li > a:focus,
.tabset-dropdown > .nav-tabs > li > a:hover {
  border: none;
  display: inline-block;
  border-radius: 4px;
}
.tabset-dropdown > .nav-tabs.nav-tabs-open > li {
  display: block;
  float: none;
}
.tabset-dropdown > .nav-tabs > li {
  display: none;
}
</style>

<!-- code folding -->



<style type="text/css">
#TOC {
  margin: 25px 0px 20px 0px;
}
@media (max-width: 768px) {
#TOC {
  position: relative;
  width: 100%;
}
}
.toc-content {
  padding-left: 30px;
  padding-right: 40px;
}
div.main-container {
  max-width: 1200px;
}
div.tocify {
  width: 20%;
  max-width: 260px;
  max-height: 85%;
}
@media (min-width: 768px) and (max-width: 991px) {
  div.tocify {
    width: 25%;
  }
}
@media (max-width: 767px) {
  div.tocify {
    width: 100%;
    max-width: none;
  }
}
.tocify ul, .tocify li {
  line-height: 20px;
}
.tocify-subheader .tocify-item {
  font-size: 0.90em;
}
.tocify .list-group-item {
  border-radius: 0px;
}
.tocify-subheader {
  display: inline;
}
.tocify-subheader .tocify-item {
  font-size: 0.95em;
}
</style>



</head>

<body>


<div class="container-fluid main-container">


<!-- setup 3col/9col grid for toc_float and main content  -->
<div class="row-fluid">
<div class="col-xs-12 col-sm-4 col-md-3">
<div id="TOC" class="tocify">
</div>
</div>

<div class="toc-content col-xs-12 col-sm-8 col-md-9">




<div id="rStudioHeader" class="alwaysShrunk">
  <div class="innards bandContent">
    <div>
      <a class="productName" href="index.html">R Markdown</a>
      <div class="rStudio"><span class="light">from </span> <a href="https://www.rstudio.com/"><div class="logo"></div></a></div>
    </div>

    <div id="menu">
      <div id="menuToggler"></div>
      <div id="menuItems">
        <a class="menuItem" href="lesson-1.html">Get Started</a>
        <a class="menuItem" href="gallery.html">Gallery</a>
        <a class="menuItem" href="formats.html">Formats</a>
        <a class="menuItem" href="articles.html">Articles</a>
        <a class="menuItem" href="https://bookdown.org/yihui/rmarkdown/">Book</a>
        <a class="menuItem" href="docs/">References</a>
        <a class="menuItem gitHub" href="https://github.com/rstudio/rmarkdown"></a>
        <a class="menuItem gitHubText" href="https://github.com/rstudio/rmarkdown">Source on GitHub</a>
      </div>
    </div>
  </div>
</div>

<style type="text/css">
#TOC {
  margin-left: 35px;
  margin-top: 90px;
}
</style>

<script type="text/javascript">
$(".main-container").removeClass("main-container").removeClass("container-fluid").addClass("footerPushDown");
</script>


<div id="pageContent" class="standardPadding">
  <div class="articleBandContent">

<div class="fluid-row" id="header">



<h1 class="title toc-ignore">Setting Output args via Render functions</h1>

</div>


<div id="basic-usage" class="section level2">
<h2>Basic Usage</h2>
<p>Often in an interactive R Markdown document, you want to embed snippets of Shiny code without having to specify the corresponding <code>ui</code> function. For example, you may want to use a <code>renderPlot()</code> function without having to create a <code>plotOutput()</code> slot beforehand. In this case, Shiny helpfully associates the corresponding output object to each <code>render</code> function, letting you use Shiny code outside of a full app. However, some functionality is lost in this process. In particular, <code>plotOutput()</code> can take in some optional arguments to set things like width and height, or allow you to click or brush over the plot (and store that information). Previously, this functionality was not available to you outside of a full Shiny app (one with a <code>server</code> function and a <code>ui</code> function, where all the <code>output</code> objects are made explicit).</p>
<p>Now, for the sake of convenience, when working with just snippets of Shiny code, you’ll able to set <code>output</code> arguments directly from the corresponding <code>render</code> function. To do so, use the <code>outputArgs</code> argument, which is available to all <code>render</code> functions. For example, let’s say that you want to render a plot and specify its width to be 200px and its height 100px. Then you should use:</p>
<pre class="markdown"><code>&#96;&#96;&#96;{r, echo = FALSE}
renderPlot({
  plot(yourData)
}, outputArgs = list(width = "200px",
                     height = "100px")
)
&#96;&#96;&#96;
</code></pre>
<p>No matter how many arguments you set (all the way from zero to all possible ones), <code>outputArgs</code> always takes in a list (as you’d expect, the default is an empty list, which sets no <code>output</code> arguments). If you try to pass in a non-existent argument, you’ll get an error with the following message (in this example, you tried to set an argument named “not_an_argument”):</p>
<p style="color:#f00; font-family: serif; padding: 12px">
<strong>Error:</strong> Unused argument: in ‘outputArgs’, ‘not_an_argument’ is not an valid argument for the output function
</p>
<p>To see this in action, check out the R Markdown script and resulting document below. The document is interactive – brush over the image and see the ‘xmin’, ‘xmax’, ‘ymin’ and ‘ymax’ values change (printed just under the image).</p>
<div id="script" class="section level3">
<h3>Script</h3>
<pre class="markdown"><code>---
title: Setting `output` args via `render` functions
runtime: shiny
output: html_document
---

This interactive Rmd document makes use of the `outputArgs` argument now available to all Shiny `render` functions. To give an example, this allows you to set arguments to `imageOutput` through `renderImage`. This means that you don't have to create a `ui` object just to be able to brush over an image. Note that this only applies to snippets of Shiny code during an interactive Rmd (and not to embedded full apps -- the ones you need to call `shinyApp` to run).

### Brushing over an image (and storing the data)

&#96;&#96;&#96{r setup, echo=FALSE}
library(datasets)
generateImage <- function() {
  outfile <- tempfile(fileext = '.png')
  png(outfile)
  par(mar = c(0,0,0,0))
  image(volcano, axes = FALSE)
  contour(volcano, add = TRUE)
  dev.off()
  list(src = outfile)
}
&#96;&#96;&#96
&#96;&#96;&#96{r image}
renderImage({
  generateImage()
}, deleteFile = TRUE, 
   outputArgs = list(brush = brushOpts(id = "plot_brush"),
                     width = "250",
                     height = "250px")
)
&#96;&#96;&#96
##### Here's some of the brushing info sent to the server:
(brush over the image to change the data)
&#96;&#96;&#96{r brush info}
renderText({ 
  print(input$plot_brush)
  brush <- input$plot_brush
  paste0("xmin: ", brush$xmin, "; ",
         "xmax: ", brush$xmax, "; ",
         "ymin: ", brush$ymin, "; ",
         "ymax: ", brush$ymax)
})
&#96;&#96;&#96
---
### Resizing a plot
&#96;&#96;&#96{r plot}
renderPlot({ 
  plot(cars) 
}, outputArgs = list(width = "75%", 
                     height = "250px")
)
&#96;&#96;&#96
</code></pre>
<p><br></p>
</div>
<div id="result" class="section level3">
<h3>Result</h3>
<iframe src="https://gallery.shinyapps.io/output-args/" frameborder="no" class="scale65" height="1360px" style="margin-bottom: -480px;">
</iframe>
</div>
</div>
<div id="a-caveat" class="section level2">
<h2>A caveat</h2>
<p>It’s important to highlight that you can only use this functionality within an interactive R Markdown document (i.e. you must set <code>runtime: shiny</code> in the header). But even if that is the case, this is only applicable to <code>ui</code>-less pieces of Shiny code. If you embed a full Shiny application in your document and try to use <code>outputArgs</code>, it will be ignored and print the following warning to the R Markdown console (in this case, your <code>ui</code> function would be something like <code>ui &lt;- plotOutput(&quot;plot&quot;)</code>):</p>
<p style="color:#f00; font-family: serif; padding: 12px">
Warning in <code>output$plot</code>(…) :<br> Unused argument: outputArgs. The argument outputArgs is only meant to be used when embedding snippets of Shiny code in an R Markdown code chunk (using runtime: shiny). When running a full Shiny app, please set the output arguments directly in the corresponding output function of your UI code.
</p>
<p>The same will happen if you try to use <code>outputArgs</code> in any other context, like inside a regular (i.e. not embedded) Shiny app. The rationale is that, if you are already specifying a <code>ui</code> function with all the <code>output</code> objects made explicit, you should set their arguments directly there, instead of going through this round-about way.</p>
</div>

  </div> <!-- articleBandContent -->
</div> <!-- pageContent -->

<div id="rStudioFooter" class="band full">
<div class="bandContent">
  <div id="copyright">© Copyright 2016 - 2018 RStudio Inc.</div>
  <div id="logos">
    <a href="https://twitter.com/rstudio" class="footerLogo twitter"></a>
    <a href="https://github.com/rstudio" class="footerLogo gitHub"></a>
    <a href="https://www.linkedin.com/company/rstudio-inc" class="footerLogo linkedIn"></a>
    <a href="https://www.facebook.com/pages/RStudio-Inc/267733656584415" Class="footerLogo facebook"></a>
  </div>
</div>
</div>

<!-- bizible -->
<script type="text/javascript" src="//cdn.bizible.com/scripts/bizible.js" async=""></script>

<!-- disqus -->
<div id="disqus_thread" class="standardPadding"></div>
<script type="text/javascript" src="js/disqus.js"></script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<script type="text/javascript" src="js/external-links.js"></script>


</div>
</div>

</div>

<script>
// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});
</script>

<!-- tabsets -->

<script>
$(document).ready(function () {
  window.buildTabsets("TOC");
});
$(document).ready(function () {
  $('.tabset-dropdown > .nav-tabs > li').click(function () {
    $(this).parent().toggleClass('nav-tabs-open')
  });
});
</script>

<!-- code folding -->

<script>
$(document).ready(function ()  {
    // move toc-ignore selectors from section div to header
    $('div.section.toc-ignore')
        .removeClass('toc-ignore')
        .children('h1,h2,h3,h4,h5').addClass('toc-ignore');
    // establish options
    var options = {
      selectors: "h1,h2,h3",
      theme: "bootstrap3",
      context: '.toc-content',
      hashGenerator: function (text) {
        return text.replace(/[.\\/?&!#<>]/g, '').replace(/\s/g, '_').toLowerCase();
      },
      ignoreSelector: ".toc-ignore",
      scrollTo: 0
    };
    options.showAndHide = false;
    options.smoothScroll = true;
    // tocify
    var toc = $("#TOC").tocify(options).data("toc-tocify");
});
</script>


</body>
</html>