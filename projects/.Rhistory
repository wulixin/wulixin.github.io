highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
nodes <- data.frame(id = 1:16,group=salers3$group,label=salers3$Actor)
edges <- data.frame(from = salers3$Actor, to = salers3$Partner)
visNetwork(nodes, edges, height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
nodes <- data.frame(id = 1:32,group=salers3$group,label=salers3$Actor)
edges <- data.frame(from = salers3$Actor, to = salers3$Partner)
visNetwork(nodes, edges, height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
graph <- graph.data.frame(
d = salers3,
directed = FALSE)
head(V(graph))
visNetwork(V(graph), E(graph), height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
data<-toVisNetworkData(graph, idToLabel = TRUE)
head(data)
salers3$group<-ifelse(salers3$Count>6,"A","B")
data<-toVisNetworkData(graph, idToLabel = TRUE)
head(data)
visNetwork(data$nodes, data$edges, height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
data$nodes$group<-data$edges$group
data$nodes$group<-salers3$group
length(data$nodes$id)
length(salers3$Actor)
length(V(graph))
nodes <- jsonlite::fromJSON("https://raw.githubusercontent.com/datastorm-open/datastorm-open.github.io/master/visNetwork/data/nodes_miserables.json")
edges <- jsonlite::fromJSON("https://raw.githubusercontent.com/datastorm-open/datastorm-open.github.io/master/visNetwork/data/edges_miserables.json")
unique(salers3$Actor)
salers3%>%group_by(Actor,Partner)
salers3%>%group_by(Actor)
length(data$edges$group)
length(data$edges)
length(data$edges$from)
length(data$edges$Count)
library(jsonlite)
nodes <- jsonlite::fromJSON("https://raw.githubusercontent.com/datastorm-open/datastorm-open.github.io/master/visNetwork/data/nodes_miserables.json")
edges <- jsonlite::fromJSON("https://raw.githubusercontent.com/datastorm-open/datastorm-open.github.io/master/visNetwork/data/edges_miserables.json")
visNetwork(data$nodes, data$edges, height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
visNetwork(nodes, edges, height = "700px", width = "100%") %>%
visOptions(selectedBy = "group",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visPhysics(stabilization = FALSE)%>%
visInteraction(navigationButtons = TRUE)
setwd()
library(shiny)
library(shinydashboard)
library(leaflet)
library(plotly)
library(visNetwork)
library(highcharter)
library(echarts4r)
library(ECharts2Shiny)
library(echarts4r.maps)
ui <- dashboardPage(
skin = "red",
dashboardHeader(title = "MaiRui",titleWidth = 100),
dashboardSidebar(
width = 180,
sidebarMenu(
menuItem("全球销售地图", tabName = "salesMap", icon = icon("dashboard")),
menuItem("客户关系网络", tabName = "customer_network", icon = icon("th")),
menuItem("产品矩阵组合", tabName = "products", icon = icon("th")),
menuItem("人力资源结构", tabName = "hr", icon = icon("th")),
menuItemOutput("menuitem")
)),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "D:\\D3.JS\\custom.css")
),
tabItems(
# First tab content
tabItem(tabName = "salesMap",
fluidRow(
box(leafletOutput('mapl',height=500,width=800))
),
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)),
fluidRow(
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
title = "Title 2", width = 4, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "warning",
"Box content"))),
# Second tab content
tabItem(tabName = "customer_network",
fluidRow(
# A static infoBox
infoBox("New Orders", 10 * 2, icon = icon("credit-card")),
# Dynamic infoBoxes
infoBoxOutput("progressBox"),
infoBoxOutput("approvalBox")
),
# infoBoxes with fill=TRUE
fluidRow(
infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),
infoBoxOutput("progressBox2"),
infoBoxOutput("approvalBox2"))
) ))
)
map<- leaflet() %>%
addTiles() %>%
addMiniMap()
Countries2<-fread("C:\\Users\\cmbcwulixin\\Documents\\GitHub\\wulixin.github.io\\projects\\Countries2.csv")
colnames(Countries2)<-c("Country","long","lat","Group","Order","Count")
countries_names<-c("South Africa","Hong Kong","Taiwan","Italy","Mexico","South Korea","Australia","Brazil","Spain","UK","France","Japan","Russia","Singapore","China","Germany","India")
Countries<-Countries2%>%
na.omit()%>%
filter(Country %in% countries_names)%>%
group_by(Country)%>%
sample_n(30, replace = TRUE)%>%
ungroup()
map<- leaflet(Countries)%>%
addTiles() %>%
#addMarkers(~long, ~lat,label = ~Country,popup = ~as.character(Count))%>%
addMarkers(clusterOptions = markerClusterOptions(),label = ~Country,popup = ~as.character(Count))%>%
addMiniMap(toggleDisplay = TRUE)%>%
addEasyButton(easyButton(
icon="fa-globe", title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }")))%>%
addLayersControl(baseGroups = ~Country,
options = layersControlOptions(collapsed = FALSE))
server <- function(input, output) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
output$mapl<- renderLeaflet(map)
}
shinyApp(ui, server)
ui <- dashboardPage(
skin = "red",
dashboardHeader(title = "MaiRui",titleWidth = 100),
dashboardSidebar(
width = 180,
sidebarMenu(
menuItem("全球销售地图", tabName = "salesMap", icon = icon("dashboard")),
menuItem("客户关系网络", tabName = "customer_network", icon = icon("th")),
menuItem("产品矩阵组合", tabName = "products", icon = icon("th")),
menuItem("人力资源结构", tabName = "hr", icon = icon("th")),
menuItemOutput("menuitem")
)),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "D:\\D3.JS\\custom.css")
),
tabItems(
# First tab content
tabItem(tabName = "salesMap",
fluidRow(
box(leafletOutput('mapl',height=500,width=800)),
verbatimTextOutput("click")
#box(plotOutput("plot1", width=200))
),
fluidRow(
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
title = "Title 2", width = 4, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "warning",
"Box content"))),
# Second tab content
tabItem(tabName = "customer_network",
fluidRow(
# A static infoBox
infoBox("New Orders", 10 * 2, icon = icon("credit-card")),
# Dynamic infoBoxes
infoBoxOutput("progressBox"),
infoBoxOutput("approvalBox")
),
# infoBoxes with fill=TRUE
fluidRow(
infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),
infoBoxOutput("progressBox2"),
infoBoxOutput("approvalBox2"))
) ))
)
Countries2<-fread("C:\\Users\\cmbcwulixin\\Documents\\GitHub\\wulixin.github.io\\projects\\Countries2.csv")
colnames(Countries2)<-c("Country","long","lat","Group","Order","Count")
countries_names<-c("South Africa","Hong Kong","Taiwan","Italy","Mexico","South Korea","Australia","Brazil","Spain","UK","France","Japan","Russia","Singapore","China","Germany","India")
Countries<-Countries2%>%
na.omit()%>%
filter(Country %in% countries_names)%>%
group_by(Country)%>%
sample_n(30, replace = TRUE)%>%
ungroup()
map<- leaflet(Countries)%>%
addTiles() %>%
#addMarkers(~long, ~lat,label = ~Country,popup = ~as.character(Count))%>%
addMarkers(clusterOptions = markerClusterOptions(),label = ~Country,popup = ~as.character(Count))%>%
addMiniMap(toggleDisplay = TRUE)%>%
addEasyButton(easyButton(
icon="fa-globe", title="Zoom to Level 1",
onClick=JS("function(btn, map){ map.setZoom(1); }")))%>%
addLayersControl(baseGroups = ~Country,
options = layersControlOptions(collapsed = FALSE))
server <- function(input, output) {
output$menuitem <- renderMenu({
menuItem("Menu item", icon = icon("calendar"))
})
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
output$mapl<- renderLeaflet(map)
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d)) "Click on a state to view event data" else d
})
}
shinyApp(ui, server)
head(Countries)
Countries3<-Countries%>%group_by(Country,Count)
head(Countries3)
Countries3<-Countries%>%select(Country,Count)%>%group_by(Country,Count)
head(Countries3)
head(Countries3,20)
server <- function(input, output) {
output$network_proxy_nodes <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>% visNodes(color = "blue")
})
observe({
visNetworkProxy("network_proxy_nodes") %>%
visFocus(id = input$Focus, scale = 4)
})
observe({
visNetworkProxy("network_proxy_nodes") %>%
visNodes(color = input$color)
})
}
ui <- fluidPage(
fluidRow(
column(
width = 4,
selectInput("color", "Color :",
c("blue", "red", "green")),
selectInput("Focus", "Focus on node :",
c(1:3))
),
column(
width = 8,
visNetworkOutput("network_proxy_nodes", height = "400px")
)
)
)
shinyApp(ui = ui, server = server)
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
library(DT)
datatable(iris) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('bold', 'weight'))) %>%
formatStyle('Sepal.Width',
color = styleInterval(3.4, c('red', 'white')),
backgroundColor = styleInterval(3.4, c('yellow', 'gray'))
)
iris2 = iris[c(1:10, 51:60, 101:110), ]
datatable(iris2, filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE
)) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
'Sepal.Width',
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
'Petal.Length',
background = styleColorBar(iris$Petal.Length, 'steelblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
) %>%
formatStyle(
'Species',
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
sketch = htmltools::withTags(table(
class = 'display',
thead(
tr(
th(rowspan = 2, 'Species'),
th(colspan = 2, 'Sepal'),
th(colspan = 2, 'Petal')
),
tr(
lapply(rep(c('Length', 'Width'), 2), th)
)
)
))
datatable(iris2[1:20, c(5, 1:4)], container = sketch, rownames = FALSE,filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE
))
datatable(iris2, filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE
)) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
'Sepal.Width',
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
'Petal.Length',
background = styleColorBar(iris$Petal.Length, 'steelblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
) %>%
formatStyle(
'Species',
transform = 'rotateX(30deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
datatable(iris2, filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE
)) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
'Sepal.Width',
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
'Petal.Length',
background = styleColorBar(iris$Petal.Length, 'steelblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
) %>%
formatStyle(
'Species',
transform = 'rotateX(20deg) rotateY(20deg) rotateZ(20deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
datatable(iris2, filter = 'top', options = list(
pageLength = 5, autoWidth = TRUE
)) %>%
formatStyle('Sepal.Length', fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
'Sepal.Width',
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
'Petal.Length',
background = styleColorBar(iris$Petal.Length, 'steelblue'),
backgroundSize = '100% 90%',
backgroundRepeat = 'no-repeat',
backgroundPosition = 'center'
) %>%
formatStyle(
'Species',
transform = 'rotateX(10deg) rotateY(10deg) rotateZ(10deg)',
backgroundColor = styleEqual(
unique(iris$Species), c('lightblue', 'lightgreen', 'lightpink')
)
)
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
library("highcharter")
ui <- fluidPage(
h1("Highcharter Demo"),
fluidRow(
column(width = 4, class = "panel",
selectInput("type", label = "Type", width = "100%",
choices = c("line", "column", "bar", "spline")),
selectInput("stacked", label = "Stacked",  width = "100%",
choices = c(FALSE, "normal", "percent")),
selectInput("theme", label = "Theme",  width = "100%",
choices = c(FALSE, "fivethirtyeight", "economist",
"darkunica", "gridlight", "sandsignika",
"null", "handdrwran", "chalk")
)
),
column(width = 8,
highchartOutput("hcontainer",height = "500px")
)
)
)
server = function(input, output) {
output$hcontainer <- renderHighchart({
hc <- highcharts_demo() %>%
hc_rm_series("Berlin") %>%
hc_chart(type = input$type)
if (input$stacked != FALSE) {
hc <- hc %>%
hc_plotOptions(series = list(stacking = input$stacked))
}
if (input$theme != FALSE) {
theme <- switch(input$theme,
null = hc_theme_null(),
darkunica = hc_theme_darkunica(),
gridlight = hc_theme_gridlight(),
sandsignika = hc_theme_sandsignika(),
fivethirtyeight = hc_theme_538(),
economist = hc_theme_economist(),
chalk = hc_theme_chalk(),
handdrwran = hc_theme_handdrawn()
)
hc <- hc %>% hc_add_theme(theme)
}
hc
})
}
shinyApp(ui = ui, server = server)
runApp('FULLBOARD.R')
runApp('FULLBOARD.R')
hchart(princomp(USArrests, cor = TRUE))
hchart(princomp(USArrests, cor = TRUE))%>% hc_add_theme(hc_theme_economist())
hchart(princomp(USArrests, cor = TRUE))%>% hc_add_theme(hc_theme_chalk())
hchart(princomp(USArrests, cor = TRUE))%>% hc_add_theme(hc_theme_ft())
runApp('FULLBOARD.R')
